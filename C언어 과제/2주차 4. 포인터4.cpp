#include<stdio.h>

int main() 
{
	int i = 10; //정수형 변수 i를 선언하고 초기값을 10으로 설정
	int* p; // int* p : 정수형 변수의 주소값을 저장하는 변수 p 선언
	//&i: 변수 i의 주소를 가져옴
	p = &i; //포인터 변수 p에 변수 i의 주소를 저장
	//이제 포인터 p는 변수 i의 주소를 가리키게 됌

	printf("i = %d\n", i);
	printf("address of i  = %p\n", p);
	printf("*p = % d\n", *p);

	return 0;
}
// 소스코드 해석
// int i : 정수 데이터를 저장하기 위한 변수 i
// i : 변수 i의 값
// &i : 변수 i의 주소 값
// int* p : 정수형 변수의 주소값을 저장하는 변수 p 선언
// p : 변수 P의 값
// p = &i : 변수 i의 주소값을 p에 대입
// *p : 포인터 p가 가진 주소에 있는 값

// 포인터의 초기화
// int* p : 정수형 변수의 주소값을 저장하는 변수 p 선언
// int* p = NULL : p를 선언하고 NULL을 대입 (NULL은 없다는 뜻)
// ex) stdio.h
//     #define NULL 0
// 주소 값에 없다는 의미는 0번지를 가르키게 하고, 0번지를 가르키는 포인터는 초기화 하지 않은 포인터다 해서 NULL포인터다 이름을 붙혀서 숫자 0과는 의미가 다르게 해석한다.
// NULL이 있으면 0이구나 그런데 이건 주소값이 아직 할당이 안되어 있다 라는 의미를 가지는 구나 라고 해석하면 된다.
// 포인터 변수에 NULL(널)이 들어가 있는지 확인해야 하는 경우가 많음

//& 연산자를 사용하면 변수의 주소를 가져올 수 있고, 
// * 연산자를 사용해 포인터가 가리키는 값에 접근할 수 있습니다

// 최종 실행 예시
//i = 10
//address of i = 0x7ffeeef1a8bc (메모리 주소는 실행할 때마다 달라질 수 있음)
//* p = 10
